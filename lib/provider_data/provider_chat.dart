import 'package:chat_app_bloc/models/chat_room.dart';
import 'package:chat_app_bloc/models/message.dart';
import 'package:chat_app_bloc/models/user.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

//? Provider for repo_chat_room
class ProviderChat {
  final _firestore = FirebaseFirestore.instance;

  //? create new chat room into chat_room
  Future setChatRoomToFireStore(User currentUser, User friend) async {
    //? create information of new chatRoom
    final ChatRoom chatRoom = ChatRoom(
      idUserSendLastMessage: currentUser.id,
      lastMessage: 'Let\'t have a chat!',
      lastModifiedTime: DateTime.now().millisecondsSinceEpoch.toString(),
    );
    //? create new chat room and get id chat room
    var autogeneratedIdChatChat = await _firestore
        .collection('chat_room')
        .add(chatRoom.toMap())
        .then((value) => value.id);

    //? get reference with id chat room
    var reference =
        _firestore.collection('chat_room').doc(autogeneratedIdChatChat);
    //? update id chat room
    await _firestore.runTransaction((transaction) async {
      transaction.update(reference, {
        'id': autogeneratedIdChatChat,
        'users': [currentUser.id, friend.id],
      });
    });
    //? write user current into user_list collection
    await addUserIntoChatRoom(currentUser, autogeneratedIdChatChat);
    //? write friend into user_list collection
    await addUserIntoChatRoom(friend, autogeneratedIdChatChat);
    //? write id chat room into user_chat
    await addIdChatRoom(currentUser.id, autogeneratedIdChatChat);
    await addIdChatRoom(friend.id, autogeneratedIdChatChat);
  }

  //? check if chat room exists by idCurrentUser and idFriend
  Future<bool> checkIfChatRoomExistsWithidUserList(List<String> idUserList) {
    return _firestore
        .collection('chat_room')
        .where('users', whereIn: [idUserList])
        .snapshots().isEmpty;
  }

  

  //? write user into chat_room > user_list collection
  Future addUserIntoChatRoom(User user, String idChatRoom) async {
    var reference = _firestore
        .collection('chat_room')
        .doc(idChatRoom)
        .collection('user_list');
    await _firestore.runTransaction((transaction) async {
      transaction.set(
        reference.doc(user.id),
        user.toMap(),
      );
    });
  }

  //? write id chat room into user_chat
  Future addIdChatRoom(String idUser, String idChatRoom) async {
    //? Check if idUser exists in user_chat
    var chatListOfUser =
        await _firestore.collection('user_chat').doc(idUser).get();
    if (chatListOfUser.exists) {
      return chatListOfUser.reference.update({idChatRoom: true});
    } else {
      return chatListOfUser.reference.set({idChatRoom: true});
    }
  }

  //? get id chat list of user
  Stream<DocumentSnapshot<Map<String, dynamic>>> getIdChatListFromFirestore(
      String idUser) {
    return _firestore.collection('user_chat').doc(idUser).snapshots();
  }

  //? get the infomation of all the chat room of by idChatRoom
  Stream<QuerySnapshot<Map<String, dynamic>>> getChatRoomFromFirestore(
      List<String> idChatRoomList) {
    return _firestore
        .collection('chat_room')
        .where('id', whereIn: idChatRoomList)
        .snapshots();
  }

  //? get message of chat room
  Stream<QuerySnapshot<Map<String, dynamic>>> getMessagesOfChatRoom(
      String idChatRoom) {
    return _firestore
        .collection('chat_room')
        .doc(idChatRoom)
        .collection('messages')
        .orderBy('time', descending: false)
        .snapshots();
  }

  //? send message
  sendChatMessageToFirestore(String idChatRoom, Message message) async {
    var reference = _firestore
        .collection('chat_room')
        .doc(idChatRoom)
        .collection('messages')
        .doc(message.time);
    return _firestore.runTransaction((transaction) async {
      transaction.set(reference, {
        'message': message.message,
        'time': message.time,
        'senderId': message.senderId,
      });
    });
  }

  //? update last message of chat room
  updateLastMessageOfChatRoom(String idChatRoom, Message message) async {
    var reference = _firestore.collection('chat_room').doc(idChatRoom);
    return _firestore.runTransaction((transaction) async {
      transaction.update(reference, {
        'lastMessage': message.message,
        'lastModifiedTime': message.time,
        'idUserSendLastMessage': message.senderId,
      });
    });
  }
}
